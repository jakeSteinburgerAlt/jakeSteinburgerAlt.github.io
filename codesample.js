const stuff = `void&nbsp;memset(uint8_t&nbsp;*array,&nbsp;uint8_t&nbsp;value,&nbsp;size_t&nbsp;size)&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(size_t&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;<&nbsp;size;&nbsp;i++)&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array[i]&nbsp;=&nbsp;value;
<br>&nbsp;&nbsp;&nbsp;&nbsp;}
<br>}
<br>
<br>//&nbsp;Function&nbsp;to&nbsp;copy&nbsp;memory
<br>void&nbsp;memcpy(uint8_t&nbsp;*dest,&nbsp;const&nbsp;char&nbsp;*src,&nbsp;size_t&nbsp;n)&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(size_t&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;<&nbsp;n;&nbsp;i++)&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest[i]&nbsp;=&nbsp;(uint8_t)src[i];
<br>&nbsp;&nbsp;&nbsp;&nbsp;}
<br>}
<br>
<br>uint32_t&nbsp;combine32bit(uint8_t&nbsp;byte1,&nbsp;uint8_t&nbsp;byte2,&nbsp;uint8_t&nbsp;byte3,&nbsp;uint8_t&nbsp;byte4)&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;((uint32_t)byte1&nbsp;<<&nbsp;24)&nbsp;|
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((uint32_t)byte2&nbsp;<<&nbsp;16)&nbsp;|
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((uint32_t)byte3&nbsp;<<&nbsp;8)&nbsp;&nbsp;|
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(uint32_t)byte4;
<br>}
<br>
<br>struct&nbsp;bootRecord&nbsp;readBoot()&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Read&nbsp;the&nbsp;first&nbsp;sector&nbsp;of&nbsp;the&nbsp;file&nbsp;system&nbsp;partition&nbsp;(assume&nbsp;it's&nbsp;2048&nbsp;because&nbsp;that's&nbsp;what&nbsp;it's&nbsp;set&nbsp;as&nbsp;in&nbsp;the&nbsp;compilation&nbsp;script.&nbsp;Safe?&nbsp;No.&nbsp;Works&nbsp;when&nbsp;not&nbsp;dualbooting&nbsp;with&nbsp;another&nbsp;OS?&nbsp;Hopefully.)
<br>&nbsp;&nbsp;&nbsp;&nbsp;char*&nbsp;rawBootSect_str&nbsp;=&nbsp;readdisk(2048);
<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Stuff&nbsp;to&nbsp;convert&nbsp;it&nbsp;into&nbsp;a&nbsp;uint8_t[512]
<br>&nbsp;&nbsp;&nbsp;&nbsp;uint8_t&nbsp;rawBootSect[512];
<br>&nbsp;&nbsp;&nbsp;&nbsp;memcpy(rawBootSect,&nbsp;rawBootSect_str,&nbsp;512);
<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Create&nbsp;an&nbsp;object&nbsp;to&nbsp;return&nbsp;and&nbsp;kinda&nbsp;just&nbsp;fill&nbsp;each&nbsp;of&nbsp;them&nbsp;up&nbsp;slowly
<br>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;bootRecord&nbsp;toReturn;
<br>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;bootRecord&nbsp;temp;
<br>&nbsp;&nbsp;&nbsp;&nbsp;temp.jmpBoot[0]&nbsp;=&nbsp;rawBootSect[0];
<br>&nbsp;&nbsp;&nbsp;&nbsp;temp.jmpBoot[1]&nbsp;=&nbsp;rawBootSect[1];
<br>&nbsp;&nbsp;&nbsp;&nbsp;temp.jmpBoot[2]&nbsp;=&nbsp;rawBootSect[2];
<br>&nbsp;&nbsp;&nbsp;&nbsp;memcpy(toReturn.jmpBoot,&nbsp;temp.jmpBoot,&nbsp;sizeof(temp.jmpBoot));
<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;<&nbsp;8;&nbsp;i++)&nbsp;{
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.OEMName[i]&nbsp;=&nbsp;rawBootSect[3&nbsp;+&nbsp;i];
<br>&nbsp;&nbsp;&nbsp;&nbsp;}
<br>&nbsp;&nbsp;&nbsp;&nbsp;memcpy(toReturn.OEMName,&nbsp;temp.OEMName,&nbsp;sizeof(temp.OEMName));`;